user  nginx;
worker_processes  4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    #worker_connections  1024;
    worker_connections  8096;
    multi_accept        on;
    use                 epoll;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;


    #gzip  on;

    include /etc/nginx/conf.d/*.conf;


    # Compression
    # Generally the best approach with compression is to only enable it for large files, and to avoid compressing things
    # that are unlikely to be reduced in size (such as images, executables, and similar binary files).
    # This enables compression for files that are over 10k, aren't being requested by early versions of Microsoft's
    # Internet Explorer, and only attempts to compress text-based files.

    gzip  on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";


    # Client Caching
    # A simple way of avoiding your server handling requests is if remote clients believe their content is already up-to-date.
    # To do this you want to set suitable cache-friendly headers, and a simple way of doing that is to declare that all images, etc, are fixed for a given period of time:

    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
             access_log        off;
             log_not_found     off;
             expires           30d;
    }

open_file_cache          max=2000 inactive=20s;
open_file_cache_valid    60s;
open_file_cache_min_uses 5;
open_file_cache_errors   off;


}
